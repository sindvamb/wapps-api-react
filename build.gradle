import java.sql.DriverManager

// Configura o classpath para incluir o driver JDBC do PostgreSQL
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.postgresql:postgresql:42.7.3'
        classpath 'org.flywaydb:flyway-database-postgresql:11.1.0'
    }
}

plugins {
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'com.github.node-gradle.node' version '7.1.0'  // Versão mais recente do plugin Node.js
    id 'org.flywaydb.flyway' version '11.1.0'
}

group = 'wastecnologia.wapps'
version = '0.0.1'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
}

repositories {
    mavenCentral()
}

// Configuração do Node.js
//node {
//    version = '24.4.1'  // Versão instalada no sistema
//    npmVersion = '11.4.2'  // Versão do npm instalada
//    download = false  // Usa o Node.js já instalado
//    workDir = file("${project.buildDir}/nodejs")
//    npmWorkDir = file("${project.buildDir}/npm")
//    nodeProjectDir = file("${project.projectDir}")
//}

// Tarefa personalizada para instalar as dependências
//task npmInstallDeps(type: NpmTask) {
//    description = 'Instala as dependências do Node.js'
//    group = 'build'
//
//    // Força a instalação limpa
//    inputs.file('package.json')
//    outputs.dir('node_modules')
//
//    // Comandos para limpar cache e instalar
//    args = ['install', '--no-audit', '--prefer-offline', '--legacy-peer-deps']
//}
//
//// Garante que o npmInstallDeps seja executado antes do npmInstall
//tasks.npmInstall.dependsOn(npmInstallDeps)

// Configuração do Flyway
flyway {
    // Configurações padrão
    def dbHost = System.getenv('DB_HOST') ?: 'localhost'
    def dbPort = System.getenv('DB_PORT') ?: '5432'
    def dbName = System.getenv('DB_NAME') ?: 'sindvamb-api-db'
    def dbUser = System.getenv('DB_USER') ?: 'postgres'
    def dbPassword = System.getenv('DB_PASSWORD') ?: '1q2w3E*'
    
    // Configura a URL do banco de dados
    url = "jdbc:postgresql://${dbHost}:${dbPort}/${dbName}"
    user = dbUser
    password = dbPassword
    baselineOnMigrate = true
    outOfOrder = false
    validateOnMigrate = true
    cleanOnValidationError = false
    driver = 'org.postgresql.Driver'
    
    println """
    ===== Configuração do Flyway =====
    URL: $url
    User: $user
    Schema: $schemas
    Locations: $locations
    =================================
    """.stripIndent()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    runtimeOnly('org.postgresql:postgresql')
    implementation('io.github.wimdeblauwe:error-handling-spring-boot-starter:4.6.0')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6')
    implementation('org.flywaydb:flyway-core:11.1.0')
    implementation('org.flywaydb:flyway-database-postgresql:11.1.0')
    
    // Dependência para o driver JDBC do PostgreSQL (já incluído em runtimeOnly)
    
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    developmentOnly('org.springframework.boot:spring-boot-devtools')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

// Configuração mínima do Node.js
node {
    version = '24.4.1'
    npmVersion = '11.4.2'
    download = false
}

//tasks.register('npmRunBuild', NpmTask) {
//    args = ['run', 'build']
//    dependsOn npmInstall
//
//    inputs.files(fileTree('node_modules'))
//    inputs.files(fileTree('src/main/webapp'))
//    inputs.file('.env')
//    inputs.file('package.json')
//    inputs.file('tsconfig.json')
//    inputs.file('webpack.config.js')
//    outputs.dir(layout.buildDirectory.dir('resources/main/static'))
//}

//processResources {
//    dependsOn npmRunBuild
//}

tasks.withType(Test) {
    useJUnitPlatform()
}

